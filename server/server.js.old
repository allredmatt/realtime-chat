var express = require('express');
var app = express();
var server = require('http').createServer(app);
var path = require('path');
var io = require('socket.io')(server);
var port = process.env.PORT || 3000;
var mongoose = require('mongoose');

server.listen(port, () => {console.log("server is running on port", server.address().port);});
app.use(express.static('static'));

mongoose.connect('mongodb://localhost/msgchat', {useNewUrlParser: true});
var database = mongoose.connection;
database.on('error', console.error.bind(console, 'database connection error:'));
database.once('open', ()=> {
   console.log("Database connected")
});

var messageSchema = new mongoose.Schema({
   usr: String,
   msg: String,
   date: { type: Date, default: Date.now },
});

io.on('connection', (socket) => {
   var Messages = mongoose.model('Messages', messageSchema);
   var query = Messages.find();
   query.sort({date:-1});
   query.limit(10);
   query.exec((err, data) =>{
      if (err) {return handleError(err);}
      data.slice().reverse().forEach((current)=>{
         io.emit('chat', ({'usr': current.usr, 'msg': current.msg}));
      });
   });
   socket.on('chat', (data) => {
      io.emit('chat',data);
      username = data.usr;
      chatitem = data.msg;
      var newmsg = new Messages({usr: username, msg: chatitem});
      newmsg.save(function (err) {
         if (err) return handleError(err);
      }); 
   });
   socket.on('type', (data) => {socket.broadcast.emit('type',data);});
});
